// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VulnerabilityItem vulnerability item
//
// swagger:model VulnerabilityItem
type VulnerabilityItem struct {

	// Description of the CVE
	// Example: dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program
	Description string `json:"description,omitempty"`

	// The version of the package containing the fix if available.
	// Example: 1.18.0
	FixVersion string `json:"fix_version,omitempty"`

	// ID of the CVE.
	// Example: CVE-2017-8283
	ID string `json:"id,omitempty"`

	// The list of link to the upstream database with the full description of the vulnerability.
	Links []string `json:"links"`

	// An operating system or software dependency package containing the vulnerability.
	// Example: dpkg
	Package string `json:"package,omitempty"`

	// A standard scale for measuring the severity of a vulnerability.
	// Example: high
	Severity string `json:"severity,omitempty"`

	// The version of the package containing the vulnerability.
	// Example: 1.17.27
	Version string `json:"version,omitempty"`
}

// Validate validates this vulnerability item
func (m *VulnerabilityItem) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vulnerability item based on context it is used
func (m *VulnerabilityItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilityItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilityItem) UnmarshalBinary(b []byte) error {
	var res VulnerabilityItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
