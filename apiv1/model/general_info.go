// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GeneralInfo general info
//
// swagger:model GeneralInfo
type GeneralInfo struct {

	// The url of the endpoint of admiral instance.
	AdmiralEndpoint string `json:"admiral_endpoint,omitempty"`

	// The auth mode of current Harbor instance.
	AuthMode string `json:"auth_mode,omitempty"`

	// clair vulnerability status
	ClairVulnerabilityStatus *GeneralInfoClairVulnerabilityStatus `json:"clair_vulnerability_status,omitempty"`

	// The external URL of Harbor, with protocol.
	ExternalURL string `json:"external_url,omitempty"`

	// The build version of Harbor.
	HarborVersion string `json:"harbor_version,omitempty"`

	// Indicate whether there is a ca root cert file ready for download in the file system.
	HasCaRoot bool `json:"has_ca_root,omitempty"`

	// The UTC time in milliseconds, after which user can call scanAll API to scan all images.
	NextScanAll int64 `json:"next_scan_all,omitempty"`

	// Indicate who can create projects, it could be 'adminonly' or 'everyone'.
	ProjectCreationRestriction string `json:"project_creation_restriction,omitempty"`

	// The url of registry against which the docker command should be issued.
	RegistryURL string `json:"registry_url,omitempty"`

	// Indicate whether the Harbor instance enable user to register himself.
	SelfRegistration bool `json:"self_registration,omitempty"`

	// If the Harbor instance is deployed with Admiral.
	WithAdmiral bool `json:"with_admiral,omitempty"`

	// If the Harbor instance is deployed with nested clair.
	WithClair bool `json:"with_clair,omitempty"`

	// If the Harbor instance is deployed with nested notary.
	WithNotary bool `json:"with_notary,omitempty"`
}

// Validate validates this general info
func (m *GeneralInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClairVulnerabilityStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeneralInfo) validateClairVulnerabilityStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ClairVulnerabilityStatus) { // not required
		return nil
	}

	if m.ClairVulnerabilityStatus != nil {
		if err := m.ClairVulnerabilityStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clair_vulnerability_status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this general info based on the context it is used
func (m *GeneralInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClairVulnerabilityStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeneralInfo) contextValidateClairVulnerabilityStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ClairVulnerabilityStatus != nil {
		if err := m.ClairVulnerabilityStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clair_vulnerability_status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GeneralInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeneralInfo) UnmarshalBinary(b []byte) error {
	var res GeneralInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GeneralInfoClairVulnerabilityStatus The status of vulnerability data of Clair.
//
// swagger:model GeneralInfoClairVulnerabilityStatus
type GeneralInfoClairVulnerabilityStatus struct {

	// Detail timestamp of different namespace.  This is introduced to handle the case when some updaters are executed successfully and some not.
	Details []*VulnNamespaceTimestamp `json:"details"`

	// The UTC timestamp in milliseconds of last successful update for Clair vulnerability data, when all the updaters are successfully executed.
	OverallLastUpdate int64 `json:"overall_last_update,omitempty"`
}

// Validate validates this general info clair vulnerability status
func (m *GeneralInfoClairVulnerabilityStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeneralInfoClairVulnerabilityStatus) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clair_vulnerability_status" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this general info clair vulnerability status based on the context it is used
func (m *GeneralInfoClairVulnerabilityStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeneralInfoClairVulnerabilityStatus) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Details); i++ {

		if m.Details[i] != nil {
			if err := m.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clair_vulnerability_status" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GeneralInfoClairVulnerabilityStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeneralInfoClairVulnerabilityStatus) UnmarshalBinary(b []byte) error {
	var res GeneralInfoClairVulnerabilityStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
