// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mittwald/goharbor-client/apiv2/model"
)

// NewPutSystemCVEWhitelistParams creates a new PutSystemCVEWhitelistParams object
// with the default values initialized.
func NewPutSystemCVEWhitelistParams() *PutSystemCVEWhitelistParams {
	var ()
	return &PutSystemCVEWhitelistParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutSystemCVEWhitelistParamsWithTimeout creates a new PutSystemCVEWhitelistParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutSystemCVEWhitelistParamsWithTimeout(timeout time.Duration) *PutSystemCVEWhitelistParams {
	var ()
	return &PutSystemCVEWhitelistParams{

		timeout: timeout,
	}
}

// NewPutSystemCVEWhitelistParamsWithContext creates a new PutSystemCVEWhitelistParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutSystemCVEWhitelistParamsWithContext(ctx context.Context) *PutSystemCVEWhitelistParams {
	var ()
	return &PutSystemCVEWhitelistParams{

		Context: ctx,
	}
}

// NewPutSystemCVEWhitelistParamsWithHTTPClient creates a new PutSystemCVEWhitelistParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutSystemCVEWhitelistParamsWithHTTPClient(client *http.Client) *PutSystemCVEWhitelistParams {
	var ()
	return &PutSystemCVEWhitelistParams{
		HTTPClient: client,
	}
}

/*PutSystemCVEWhitelistParams contains all the parameters to send to the API endpoint
for the put system c v e whitelist operation typically these are written to a http.Request
*/
type PutSystemCVEWhitelistParams struct {

	/*Whitelist
	  The whitelist with new content

	*/
	Whitelist *model.CVEWhitelist

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put system c v e whitelist params
func (o *PutSystemCVEWhitelistParams) WithTimeout(timeout time.Duration) *PutSystemCVEWhitelistParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put system c v e whitelist params
func (o *PutSystemCVEWhitelistParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put system c v e whitelist params
func (o *PutSystemCVEWhitelistParams) WithContext(ctx context.Context) *PutSystemCVEWhitelistParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put system c v e whitelist params
func (o *PutSystemCVEWhitelistParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put system c v e whitelist params
func (o *PutSystemCVEWhitelistParams) WithHTTPClient(client *http.Client) *PutSystemCVEWhitelistParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put system c v e whitelist params
func (o *PutSystemCVEWhitelistParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWhitelist adds the whitelist to the put system c v e whitelist params
func (o *PutSystemCVEWhitelistParams) WithWhitelist(whitelist *model.CVEWhitelist) *PutSystemCVEWhitelistParams {
	o.SetWhitelist(whitelist)
	return o
}

// SetWhitelist adds the whitelist to the put system c v e whitelist params
func (o *PutSystemCVEWhitelistParams) SetWhitelist(whitelist *model.CVEWhitelist) {
	o.Whitelist = whitelist
}

// WriteToRequest writes these params to a swagger request
func (o *PutSystemCVEWhitelistParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Whitelist != nil {
		if err := r.SetBodyParam(o.Whitelist); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
