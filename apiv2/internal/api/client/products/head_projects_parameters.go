// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewHeadProjectsParams creates a new HeadProjectsParams object
// with the default values initialized.
func NewHeadProjectsParams() *HeadProjectsParams {
	var ()
	return &HeadProjectsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHeadProjectsParamsWithTimeout creates a new HeadProjectsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHeadProjectsParamsWithTimeout(timeout time.Duration) *HeadProjectsParams {
	var ()
	return &HeadProjectsParams{

		timeout: timeout,
	}
}

// NewHeadProjectsParamsWithContext creates a new HeadProjectsParams object
// with the default values initialized, and the ability to set a context for a request
func NewHeadProjectsParamsWithContext(ctx context.Context) *HeadProjectsParams {
	var ()
	return &HeadProjectsParams{

		Context: ctx,
	}
}

// NewHeadProjectsParamsWithHTTPClient creates a new HeadProjectsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHeadProjectsParamsWithHTTPClient(client *http.Client) *HeadProjectsParams {
	var ()
	return &HeadProjectsParams{
		HTTPClient: client,
	}
}

/*HeadProjectsParams contains all the parameters to send to the API endpoint
for the head projects operation typically these are written to a http.Request
*/
type HeadProjectsParams struct {

	/*ProjectName
	  Project name for checking exists.

	*/
	ProjectName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the head projects params
func (o *HeadProjectsParams) WithTimeout(timeout time.Duration) *HeadProjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the head projects params
func (o *HeadProjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the head projects params
func (o *HeadProjectsParams) WithContext(ctx context.Context) *HeadProjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the head projects params
func (o *HeadProjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the head projects params
func (o *HeadProjectsParams) WithHTTPClient(client *http.Client) *HeadProjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the head projects params
func (o *HeadProjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProjectName adds the projectName to the head projects params
func (o *HeadProjectsParams) WithProjectName(projectName string) *HeadProjectsParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the head projects params
func (o *HeadProjectsParams) SetProjectName(projectName string) {
	o.ProjectName = projectName
}

// WriteToRequest writes these params to a swagger request
func (o *HeadProjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param project_name
	qrProjectName := o.ProjectName
	qProjectName := qrProjectName
	if qProjectName != "" {
		if err := r.SetQueryParam("project_name", qProjectName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
