// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/testwill/goharbor-client/v5/apiv2/model"
)

// ListWebhookPoliciesOfProjectReader is a Reader for the ListWebhookPoliciesOfProject structure.
type ListWebhookPoliciesOfProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListWebhookPoliciesOfProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListWebhookPoliciesOfProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListWebhookPoliciesOfProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListWebhookPoliciesOfProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListWebhookPoliciesOfProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListWebhookPoliciesOfProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListWebhookPoliciesOfProjectOK creates a ListWebhookPoliciesOfProjectOK with default headers values
func NewListWebhookPoliciesOfProjectOK() *ListWebhookPoliciesOfProjectOK {
	return &ListWebhookPoliciesOfProjectOK{}
}

/*ListWebhookPoliciesOfProjectOK handles this case with default header values.

Success
*/
type ListWebhookPoliciesOfProjectOK struct {
	/*Link refers to the previous page and next page
	 */
	Link string
	/*The total count of webhook policies.
	 */
	XTotalCount int64

	Payload []*model.WebhookPolicy
}

func (o *ListWebhookPoliciesOfProjectOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies][%d] listWebhookPoliciesOfProjectOK  %+v", 200, o.Payload)
}

func (o *ListWebhookPoliciesOfProjectOK) GetPayload() []*model.WebhookPolicy {
	return o.Payload
}

func (o *ListWebhookPoliciesOfProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header X-Total-Count
	xTotalCount, err := swag.ConvertInt64(response.GetHeader("X-Total-Count"))
	if err != nil {
		return errors.InvalidType("X-Total-Count", "header", "int64", response.GetHeader("X-Total-Count"))
	}
	o.XTotalCount = xTotalCount

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListWebhookPoliciesOfProjectBadRequest creates a ListWebhookPoliciesOfProjectBadRequest with default headers values
func NewListWebhookPoliciesOfProjectBadRequest() *ListWebhookPoliciesOfProjectBadRequest {
	return &ListWebhookPoliciesOfProjectBadRequest{}
}

/*ListWebhookPoliciesOfProjectBadRequest handles this case with default header values.

Bad request
*/
type ListWebhookPoliciesOfProjectBadRequest struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListWebhookPoliciesOfProjectBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies][%d] listWebhookPoliciesOfProjectBadRequest  %+v", 400, o.Payload)
}

func (o *ListWebhookPoliciesOfProjectBadRequest) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListWebhookPoliciesOfProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListWebhookPoliciesOfProjectUnauthorized creates a ListWebhookPoliciesOfProjectUnauthorized with default headers values
func NewListWebhookPoliciesOfProjectUnauthorized() *ListWebhookPoliciesOfProjectUnauthorized {
	return &ListWebhookPoliciesOfProjectUnauthorized{}
}

/*ListWebhookPoliciesOfProjectUnauthorized handles this case with default header values.

Unauthorized
*/
type ListWebhookPoliciesOfProjectUnauthorized struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListWebhookPoliciesOfProjectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies][%d] listWebhookPoliciesOfProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *ListWebhookPoliciesOfProjectUnauthorized) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListWebhookPoliciesOfProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListWebhookPoliciesOfProjectForbidden creates a ListWebhookPoliciesOfProjectForbidden with default headers values
func NewListWebhookPoliciesOfProjectForbidden() *ListWebhookPoliciesOfProjectForbidden {
	return &ListWebhookPoliciesOfProjectForbidden{}
}

/*ListWebhookPoliciesOfProjectForbidden handles this case with default header values.

Forbidden
*/
type ListWebhookPoliciesOfProjectForbidden struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListWebhookPoliciesOfProjectForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies][%d] listWebhookPoliciesOfProjectForbidden  %+v", 403, o.Payload)
}

func (o *ListWebhookPoliciesOfProjectForbidden) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListWebhookPoliciesOfProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListWebhookPoliciesOfProjectInternalServerError creates a ListWebhookPoliciesOfProjectInternalServerError with default headers values
func NewListWebhookPoliciesOfProjectInternalServerError() *ListWebhookPoliciesOfProjectInternalServerError {
	return &ListWebhookPoliciesOfProjectInternalServerError{}
}

/*ListWebhookPoliciesOfProjectInternalServerError handles this case with default header values.

Internal server error
*/
type ListWebhookPoliciesOfProjectInternalServerError struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListWebhookPoliciesOfProjectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies][%d] listWebhookPoliciesOfProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *ListWebhookPoliciesOfProjectInternalServerError) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListWebhookPoliciesOfProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
