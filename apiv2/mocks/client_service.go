// +build !integration
// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	products "github.com/mittwald/goharbor-client/apiv2/internal/api/client/products"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

// DeleteChartrepoRepoChartsNameVersionLabelsID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteChartrepoRepoChartsNameVersionLabelsID(params *products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, runtime.ClientAuthInfoWriter) *products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLabelsID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteLabelsID(params *products.DeleteLabelsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteLabelsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteLabelsIDParams, runtime.ClientAuthInfoWriter) *products.DeleteLabelsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteLabelsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteProjectsProjectID(params *products.DeleteProjectsProjectIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteProjectsProjectIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteProjectsProjectIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDParams, runtime.ClientAuthInfoWriter) *products.DeleteProjectsProjectIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDImmutabletagrulesID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteProjectsProjectIDImmutabletagrulesID(params *products.DeleteProjectsProjectIDImmutabletagrulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteProjectsProjectIDImmutabletagrulesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteProjectsProjectIDImmutabletagrulesIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDImmutabletagrulesIDParams, runtime.ClientAuthInfoWriter) *products.DeleteProjectsProjectIDImmutabletagrulesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDImmutabletagrulesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDImmutabletagrulesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDMembersMid provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteProjectsProjectIDMembersMid(params *products.DeleteProjectsProjectIDMembersMidParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteProjectsProjectIDMembersMidOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteProjectsProjectIDMembersMidOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter) *products.DeleteProjectsProjectIDMembersMidOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDMembersMidOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDMetadatasMetaName provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteProjectsProjectIDMetadatasMetaName(params *products.DeleteProjectsProjectIDMetadatasMetaNameParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteProjectsProjectIDMetadatasMetaNameOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteProjectsProjectIDMetadatasMetaNameOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter) *products.DeleteProjectsProjectIDMetadatasMetaNameOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDMetadatasMetaNameOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDRobotsRobotID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteProjectsProjectIDRobotsRobotID(params *products.DeleteProjectsProjectIDRobotsRobotIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteProjectsProjectIDRobotsRobotIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteProjectsProjectIDRobotsRobotIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDRobotsRobotIDParams, runtime.ClientAuthInfoWriter) *products.DeleteProjectsProjectIDRobotsRobotIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDRobotsRobotIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDRobotsRobotIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDWebhookPoliciesPolicyID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteProjectsProjectIDWebhookPoliciesPolicyID(params *products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter) *products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegistriesID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteRegistriesID(params *products.DeleteRegistriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteRegistriesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteRegistriesIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteRegistriesIDParams, runtime.ClientAuthInfoWriter) *products.DeleteRegistriesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteRegistriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteRegistriesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationPoliciesID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteReplicationPoliciesID(params *products.DeleteReplicationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteReplicationPoliciesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteReplicationPoliciesIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter) *products.DeleteReplicationPoliciesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteReplicationPoliciesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsergroupsGroupID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteUsergroupsGroupID(params *products.DeleteUsergroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteUsergroupsGroupIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteUsergroupsGroupIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter) *products.DeleteUsergroupsGroupIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteUsergroupsGroupIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsersUserID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) DeleteUsersUserID(params *products.DeleteUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteUsersUserIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteUsersUserIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteUsersUserIDParams, runtime.ClientAuthInfoWriter) *products.DeleteUsersUserIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteUsersUserIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteUsersUserIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChartrepoRepoChartsNameVersionLabels provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetChartrepoRepoChartsNameVersionLabels(params *products.GetChartrepoRepoChartsNameVersionLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetChartrepoRepoChartsNameVersionLabelsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetChartrepoRepoChartsNameVersionLabelsOK
	if rf, ok := ret.Get(0).(func(*products.GetChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter) *products.GetChartrepoRepoChartsNameVersionLabelsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetChartrepoRepoChartsNameVersionLabelsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurations provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetConfigurations(params *products.GetConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetConfigurationsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetConfigurationsOK
	if rf, ok := ret.Get(0).(func(*products.GetConfigurationsParams, runtime.ClientAuthInfoWriter) *products.GetConfigurationsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetConfigurationsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetConfigurationsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealth provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetHealth(params *products.GetHealthParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetHealthOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetHealthOK
	if rf, ok := ret.Get(0).(func(*products.GetHealthParams, runtime.ClientAuthInfoWriter) *products.GetHealthOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetHealthOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetHealthParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLabels provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetLabels(params *products.GetLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetLabelsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetLabelsOK
	if rf, ok := ret.Get(0).(func(*products.GetLabelsParams, runtime.ClientAuthInfoWriter) *products.GetLabelsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetLabelsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetLabelsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLabelsID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetLabelsID(params *products.GetLabelsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetLabelsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.GetLabelsIDParams, runtime.ClientAuthInfoWriter) *products.GetLabelsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetLabelsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLdapGroupsSearch provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetLdapGroupsSearch(params *products.GetLdapGroupsSearchParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetLdapGroupsSearchOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetLdapGroupsSearchOK
	if rf, ok := ret.Get(0).(func(*products.GetLdapGroupsSearchParams, runtime.ClientAuthInfoWriter) *products.GetLdapGroupsSearchOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetLdapGroupsSearchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetLdapGroupsSearchParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLdapUsersSearch provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetLdapUsersSearch(params *products.GetLdapUsersSearchParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetLdapUsersSearchOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetLdapUsersSearchOK
	if rf, ok := ret.Get(0).(func(*products.GetLdapUsersSearchParams, runtime.ClientAuthInfoWriter) *products.GetLdapUsersSearchOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetLdapUsersSearchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetLdapUsersSearchParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjects provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjects(params *products.GetProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsParams, runtime.ClientAuthInfoWriter) *products.GetProjectsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectID(params *products.GetProjectsProjectIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDImmutabletagrules provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDImmutabletagrules(params *products.GetProjectsProjectIDImmutabletagrulesParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDImmutabletagrulesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDImmutabletagrulesOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDImmutabletagrulesParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDImmutabletagrulesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDImmutabletagrulesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDImmutabletagrulesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDMembers provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDMembers(params *products.GetProjectsProjectIDMembersParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDMembersOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDMembersOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDMembersParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDMembersOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDMembersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDMembersParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDMembersMid provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDMembersMid(params *products.GetProjectsProjectIDMembersMidParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDMembersMidOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDMembersMidOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDMembersMidOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDMembersMidOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDMetadatas provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDMetadatas(params *products.GetProjectsProjectIDMetadatasParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDMetadatasOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDMetadatasOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDMetadatasParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDMetadatasOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDMetadatasOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDMetadatasParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDMetadatasMetaName provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDMetadatasMetaName(params *products.GetProjectsProjectIDMetadatasMetaNameParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDMetadatasMetaNameOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDMetadatasMetaNameOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDMetadatasMetaNameOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDMetadatasMetaNameOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDRobots provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDRobots(params *products.GetProjectsProjectIDRobotsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDRobotsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDRobotsOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDRobotsParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDRobotsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDRobotsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDRobotsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDRobotsRobotID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDRobotsRobotID(params *products.GetProjectsProjectIDRobotsRobotIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDRobotsRobotIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDRobotsRobotIDOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDRobotsRobotIDParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDRobotsRobotIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDRobotsRobotIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDRobotsRobotIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDScanner provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDScanner(params *products.GetProjectsProjectIDScannerParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDScannerOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDScannerOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDScannerParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDScannerOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDScannerOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDScannerParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDScannerCandidates provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDScannerCandidates(params *products.GetProjectsProjectIDScannerCandidatesParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDScannerCandidatesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDScannerCandidatesOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDScannerCandidatesParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDScannerCandidatesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDScannerCandidatesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDScannerCandidatesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDSummary provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDSummary(params *products.GetProjectsProjectIDSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDSummaryOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDSummaryOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDSummaryParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDSummaryOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDSummaryOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDSummaryParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookEvents provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDWebhookEvents(params *products.GetProjectsProjectIDWebhookEventsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDWebhookEventsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDWebhookEventsOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookEventsParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDWebhookEventsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookEventsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookEventsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookJobs provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDWebhookJobs(params *products.GetProjectsProjectIDWebhookJobsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDWebhookJobsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDWebhookJobsOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookJobsParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDWebhookJobsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookJobsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookJobsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookLasttrigger provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDWebhookLasttrigger(params *products.GetProjectsProjectIDWebhookLasttriggerParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDWebhookLasttriggerOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDWebhookLasttriggerOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookLasttriggerParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDWebhookLasttriggerOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookLasttriggerOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookLasttriggerParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookPolicies provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDWebhookPolicies(params *products.GetProjectsProjectIDWebhookPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDWebhookPoliciesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDWebhookPoliciesOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookPoliciesParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDWebhookPoliciesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookPoliciesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookPoliciesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookPoliciesPolicyID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetProjectsProjectIDWebhookPoliciesPolicyID(params *products.GetProjectsProjectIDWebhookPoliciesPolicyIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetProjectsProjectIDWebhookPoliciesPolicyIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetProjectsProjectIDWebhookPoliciesPolicyIDOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter) *products.GetProjectsProjectIDWebhookPoliciesPolicyIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookPoliciesPolicyIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuotas provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetQuotas(params *products.GetQuotasParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetQuotasOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetQuotasOK
	if rf, ok := ret.Get(0).(func(*products.GetQuotasParams, runtime.ClientAuthInfoWriter) *products.GetQuotasOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetQuotasOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetQuotasParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuotasID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetQuotasID(params *products.GetQuotasIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetQuotasIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetQuotasIDOK
	if rf, ok := ret.Get(0).(func(*products.GetQuotasIDParams, runtime.ClientAuthInfoWriter) *products.GetQuotasIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetQuotasIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetQuotasIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistries provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRegistries(params *products.GetRegistriesParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRegistriesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRegistriesOK
	if rf, ok := ret.Get(0).(func(*products.GetRegistriesParams, runtime.ClientAuthInfoWriter) *products.GetRegistriesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRegistriesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRegistriesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistriesID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRegistriesID(params *products.GetRegistriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRegistriesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRegistriesIDOK
	if rf, ok := ret.Get(0).(func(*products.GetRegistriesIDParams, runtime.ClientAuthInfoWriter) *products.GetRegistriesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRegistriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRegistriesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistriesIDInfo provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRegistriesIDInfo(params *products.GetRegistriesIDInfoParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRegistriesIDInfoOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRegistriesIDInfoOK
	if rf, ok := ret.Get(0).(func(*products.GetRegistriesIDInfoParams, runtime.ClientAuthInfoWriter) *products.GetRegistriesIDInfoOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRegistriesIDInfoOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRegistriesIDInfoParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistriesIDNamespace provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRegistriesIDNamespace(params *products.GetRegistriesIDNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRegistriesIDNamespaceOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRegistriesIDNamespaceOK
	if rf, ok := ret.Get(0).(func(*products.GetRegistriesIDNamespaceParams, runtime.ClientAuthInfoWriter) *products.GetRegistriesIDNamespaceOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRegistriesIDNamespaceOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRegistriesIDNamespaceParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationAdapters provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetReplicationAdapters(params *products.GetReplicationAdaptersParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetReplicationAdaptersOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetReplicationAdaptersOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationAdaptersParams, runtime.ClientAuthInfoWriter) *products.GetReplicationAdaptersOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationAdaptersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationAdaptersParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationExecutions provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetReplicationExecutions(params *products.GetReplicationExecutionsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetReplicationExecutionsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetReplicationExecutionsOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationExecutionsParams, runtime.ClientAuthInfoWriter) *products.GetReplicationExecutionsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationExecutionsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationExecutionsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationExecutionsID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetReplicationExecutionsID(params *products.GetReplicationExecutionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetReplicationExecutionsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetReplicationExecutionsIDOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationExecutionsIDParams, runtime.ClientAuthInfoWriter) *products.GetReplicationExecutionsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationExecutionsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationExecutionsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationExecutionsIDTasks provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetReplicationExecutionsIDTasks(params *products.GetReplicationExecutionsIDTasksParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetReplicationExecutionsIDTasksOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetReplicationExecutionsIDTasksOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationExecutionsIDTasksParams, runtime.ClientAuthInfoWriter) *products.GetReplicationExecutionsIDTasksOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationExecutionsIDTasksOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationExecutionsIDTasksParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationExecutionsIDTasksTaskIDLog provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetReplicationExecutionsIDTasksTaskIDLog(params *products.GetReplicationExecutionsIDTasksTaskIDLogParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetReplicationExecutionsIDTasksTaskIDLogOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetReplicationExecutionsIDTasksTaskIDLogOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationExecutionsIDTasksTaskIDLogParams, runtime.ClientAuthInfoWriter) *products.GetReplicationExecutionsIDTasksTaskIDLogOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationExecutionsIDTasksTaskIDLogOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationExecutionsIDTasksTaskIDLogParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationPolicies provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetReplicationPolicies(params *products.GetReplicationPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetReplicationPoliciesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetReplicationPoliciesOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationPoliciesParams, runtime.ClientAuthInfoWriter) *products.GetReplicationPoliciesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationPoliciesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationPoliciesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationPoliciesID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetReplicationPoliciesID(params *products.GetReplicationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetReplicationPoliciesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetReplicationPoliciesIDOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter) *products.GetReplicationPoliciesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationPoliciesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetentionsID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRetentionsID(params *products.GetRetentionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRetentionsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRetentionsIDOK
	if rf, ok := ret.Get(0).(func(*products.GetRetentionsIDParams, runtime.ClientAuthInfoWriter) *products.GetRetentionsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRetentionsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRetentionsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetentionsIDExecutions provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRetentionsIDExecutions(params *products.GetRetentionsIDExecutionsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRetentionsIDExecutionsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRetentionsIDExecutionsOK
	if rf, ok := ret.Get(0).(func(*products.GetRetentionsIDExecutionsParams, runtime.ClientAuthInfoWriter) *products.GetRetentionsIDExecutionsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRetentionsIDExecutionsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRetentionsIDExecutionsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetentionsIDExecutionsEidTasks provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRetentionsIDExecutionsEidTasks(params *products.GetRetentionsIDExecutionsEidTasksParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRetentionsIDExecutionsEidTasksOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRetentionsIDExecutionsEidTasksOK
	if rf, ok := ret.Get(0).(func(*products.GetRetentionsIDExecutionsEidTasksParams, runtime.ClientAuthInfoWriter) *products.GetRetentionsIDExecutionsEidTasksOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRetentionsIDExecutionsEidTasksOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRetentionsIDExecutionsEidTasksParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetentionsIDExecutionsEidTasksTid provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRetentionsIDExecutionsEidTasksTid(params *products.GetRetentionsIDExecutionsEidTasksTidParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRetentionsIDExecutionsEidTasksTidOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRetentionsIDExecutionsEidTasksTidOK
	if rf, ok := ret.Get(0).(func(*products.GetRetentionsIDExecutionsEidTasksTidParams, runtime.ClientAuthInfoWriter) *products.GetRetentionsIDExecutionsEidTasksTidOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRetentionsIDExecutionsEidTasksTidOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRetentionsIDExecutionsEidTasksTidParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetentionsMetadatas provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetRetentionsMetadatas(params *products.GetRetentionsMetadatasParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetRetentionsMetadatasOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetRetentionsMetadatasOK
	if rf, ok := ret.Get(0).(func(*products.GetRetentionsMetadatasParams, runtime.ClientAuthInfoWriter) *products.GetRetentionsMetadatasOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRetentionsMetadatasOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRetentionsMetadatasParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScanners provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetScanners(params *products.GetScannersParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetScannersOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetScannersOK
	if rf, ok := ret.Get(0).(func(*products.GetScannersParams, runtime.ClientAuthInfoWriter) *products.GetScannersOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetScannersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetScannersParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScannersRegistrationID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetScannersRegistrationID(params *products.GetScannersRegistrationIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetScannersRegistrationIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetScannersRegistrationIDOK
	if rf, ok := ret.Get(0).(func(*products.GetScannersRegistrationIDParams, runtime.ClientAuthInfoWriter) *products.GetScannersRegistrationIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetScannersRegistrationIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetScannersRegistrationIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScannersRegistrationIDMetadata provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetScannersRegistrationIDMetadata(params *products.GetScannersRegistrationIDMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetScannersRegistrationIDMetadataOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetScannersRegistrationIDMetadataOK
	if rf, ok := ret.Get(0).(func(*products.GetScannersRegistrationIDMetadataParams, runtime.ClientAuthInfoWriter) *products.GetScannersRegistrationIDMetadataOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetScannersRegistrationIDMetadataOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetScannersRegistrationIDMetadataParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScansAllMetrics provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetScansAllMetrics(params *products.GetScansAllMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetScansAllMetricsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetScansAllMetricsOK
	if rf, ok := ret.Get(0).(func(*products.GetScansAllMetricsParams, runtime.ClientAuthInfoWriter) *products.GetScansAllMetricsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetScansAllMetricsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetScansAllMetricsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScansScheduleMetrics provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetScansScheduleMetrics(params *products.GetScansScheduleMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetScansScheduleMetricsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetScansScheduleMetricsOK
	if rf, ok := ret.Get(0).(func(*products.GetScansScheduleMetricsParams, runtime.ClientAuthInfoWriter) *products.GetScansScheduleMetricsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetScansScheduleMetricsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetScansScheduleMetricsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSearch provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSearch(params *products.GetSearchParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSearchOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSearchOK
	if rf, ok := ret.Get(0).(func(*products.GetSearchParams, runtime.ClientAuthInfoWriter) *products.GetSearchOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSearchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSearchParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatistics provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetStatistics(params *products.GetStatisticsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetStatisticsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetStatisticsOK
	if rf, ok := ret.Get(0).(func(*products.GetStatisticsParams, runtime.ClientAuthInfoWriter) *products.GetStatisticsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetStatisticsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetStatisticsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemCVEWhitelist provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSystemCVEWhitelist(params *products.GetSystemCVEWhitelistParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSystemCVEWhitelistOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSystemCVEWhitelistOK
	if rf, ok := ret.Get(0).(func(*products.GetSystemCVEWhitelistParams, runtime.ClientAuthInfoWriter) *products.GetSystemCVEWhitelistOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSystemCVEWhitelistOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSystemCVEWhitelistParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemGc provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSystemGc(params *products.GetSystemGcParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSystemGcOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSystemGcOK
	if rf, ok := ret.Get(0).(func(*products.GetSystemGcParams, runtime.ClientAuthInfoWriter) *products.GetSystemGcOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSystemGcOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSystemGcParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemGcID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSystemGcID(params *products.GetSystemGcIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSystemGcIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSystemGcIDOK
	if rf, ok := ret.Get(0).(func(*products.GetSystemGcIDParams, runtime.ClientAuthInfoWriter) *products.GetSystemGcIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSystemGcIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSystemGcIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemGcIDLog provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSystemGcIDLog(params *products.GetSystemGcIDLogParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSystemGcIDLogOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSystemGcIDLogOK
	if rf, ok := ret.Get(0).(func(*products.GetSystemGcIDLogParams, runtime.ClientAuthInfoWriter) *products.GetSystemGcIDLogOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSystemGcIDLogOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSystemGcIDLogParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemGcSchedule provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSystemGcSchedule(params *products.GetSystemGcScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSystemGcScheduleOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSystemGcScheduleOK
	if rf, ok := ret.Get(0).(func(*products.GetSystemGcScheduleParams, runtime.ClientAuthInfoWriter) *products.GetSystemGcScheduleOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSystemGcScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSystemGcScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemScanAllSchedule provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSystemScanAllSchedule(params *products.GetSystemScanAllScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSystemScanAllScheduleOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSystemScanAllScheduleOK
	if rf, ok := ret.Get(0).(func(*products.GetSystemScanAllScheduleParams, runtime.ClientAuthInfoWriter) *products.GetSystemScanAllScheduleOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSystemScanAllScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSystemScanAllScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSysteminfo provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSysteminfo(params *products.GetSysteminfoParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSysteminfoOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSysteminfoOK
	if rf, ok := ret.Get(0).(func(*products.GetSysteminfoParams, runtime.ClientAuthInfoWriter) *products.GetSysteminfoOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSysteminfoOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSysteminfoParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSysteminfoGetcert provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSysteminfoGetcert(params *products.GetSysteminfoGetcertParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSysteminfoGetcertOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSysteminfoGetcertOK
	if rf, ok := ret.Get(0).(func(*products.GetSysteminfoGetcertParams, runtime.ClientAuthInfoWriter) *products.GetSysteminfoGetcertOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSysteminfoGetcertOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSysteminfoGetcertParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSysteminfoVolumes provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetSysteminfoVolumes(params *products.GetSysteminfoVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetSysteminfoVolumesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetSysteminfoVolumesOK
	if rf, ok := ret.Get(0).(func(*products.GetSysteminfoVolumesParams, runtime.ClientAuthInfoWriter) *products.GetSysteminfoVolumesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSysteminfoVolumesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSysteminfoVolumesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsergroups provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetUsergroups(params *products.GetUsergroupsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetUsergroupsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetUsergroupsOK
	if rf, ok := ret.Get(0).(func(*products.GetUsergroupsParams, runtime.ClientAuthInfoWriter) *products.GetUsergroupsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsergroupsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsergroupsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsergroupsGroupID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetUsergroupsGroupID(params *products.GetUsergroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetUsergroupsGroupIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetUsergroupsGroupIDOK
	if rf, ok := ret.Get(0).(func(*products.GetUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter) *products.GetUsergroupsGroupIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsergroupsGroupIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetUsers(params *products.GetUsersParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetUsersOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetUsersOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersParams, runtime.ClientAuthInfoWriter) *products.GetUsersOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersCurrent provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetUsersCurrent(params *products.GetUsersCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetUsersCurrentOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetUsersCurrentOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersCurrentParams, runtime.ClientAuthInfoWriter) *products.GetUsersCurrentOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersCurrentOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersCurrentParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersCurrentPermissions provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetUsersCurrentPermissions(params *products.GetUsersCurrentPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetUsersCurrentPermissionsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetUsersCurrentPermissionsOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersCurrentPermissionsParams, runtime.ClientAuthInfoWriter) *products.GetUsersCurrentPermissionsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersCurrentPermissionsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersCurrentPermissionsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersSearch provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetUsersSearch(params *products.GetUsersSearchParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetUsersSearchOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetUsersSearchOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersSearchParams, runtime.ClientAuthInfoWriter) *products.GetUsersSearchOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersSearchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersSearchParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersUserID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) GetUsersUserID(params *products.GetUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetUsersUserIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetUsersUserIDOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersUserIDParams, runtime.ClientAuthInfoWriter) *products.GetUsersUserIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersUserIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersUserIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeadProjects provides a mock function with given fields: params, authInfo
func (_m *MockClientService) HeadProjects(params *products.HeadProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*products.HeadProjectsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.HeadProjectsOK
	if rf, ok := ret.Get(0).(func(*products.HeadProjectsParams, runtime.ClientAuthInfoWriter) *products.HeadProjectsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.HeadProjectsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.HeadProjectsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchRetentionsIDExecutionsEid provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PatchRetentionsIDExecutionsEid(params *products.PatchRetentionsIDExecutionsEidParams, authInfo runtime.ClientAuthInfoWriter) (*products.PatchRetentionsIDExecutionsEidOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PatchRetentionsIDExecutionsEidOK
	if rf, ok := ret.Get(0).(func(*products.PatchRetentionsIDExecutionsEidParams, runtime.ClientAuthInfoWriter) *products.PatchRetentionsIDExecutionsEidOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PatchRetentionsIDExecutionsEidOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PatchRetentionsIDExecutionsEidParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostChartrepoRepoChartsNameVersionLabels provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostChartrepoRepoChartsNameVersionLabels(params *products.PostChartrepoRepoChartsNameVersionLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostChartrepoRepoChartsNameVersionLabelsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostChartrepoRepoChartsNameVersionLabelsOK
	if rf, ok := ret.Get(0).(func(*products.PostChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter) *products.PostChartrepoRepoChartsNameVersionLabelsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostChartrepoRepoChartsNameVersionLabelsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostEmailPing provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostEmailPing(params *products.PostEmailPingParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostEmailPingOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostEmailPingOK
	if rf, ok := ret.Get(0).(func(*products.PostEmailPingParams, runtime.ClientAuthInfoWriter) *products.PostEmailPingOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostEmailPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostEmailPingParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLabels provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostLabels(params *products.PostLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostLabelsCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostLabelsCreated
	if rf, ok := ret.Get(0).(func(*products.PostLabelsParams, runtime.ClientAuthInfoWriter) *products.PostLabelsCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostLabelsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostLabelsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLdapPing provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostLdapPing(params *products.PostLdapPingParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostLdapPingOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostLdapPingOK
	if rf, ok := ret.Get(0).(func(*products.PostLdapPingParams, runtime.ClientAuthInfoWriter) *products.PostLdapPingOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostLdapPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostLdapPingParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLdapUsersImport provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostLdapUsersImport(params *products.PostLdapUsersImportParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostLdapUsersImportOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostLdapUsersImportOK
	if rf, ok := ret.Get(0).(func(*products.PostLdapUsersImportParams, runtime.ClientAuthInfoWriter) *products.PostLdapUsersImportOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostLdapUsersImportOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostLdapUsersImportParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjects provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostProjects(params *products.PostProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostProjectsCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostProjectsCreated
	if rf, ok := ret.Get(0).(func(*products.PostProjectsParams, runtime.ClientAuthInfoWriter) *products.PostProjectsCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDImmutabletagrules provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostProjectsProjectIDImmutabletagrules(params *products.PostProjectsProjectIDImmutabletagrulesParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostProjectsProjectIDImmutabletagrulesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostProjectsProjectIDImmutabletagrulesOK
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDImmutabletagrulesParams, runtime.ClientAuthInfoWriter) *products.PostProjectsProjectIDImmutabletagrulesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDImmutabletagrulesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDImmutabletagrulesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDMembers provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostProjectsProjectIDMembers(params *products.PostProjectsProjectIDMembersParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostProjectsProjectIDMembersCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostProjectsProjectIDMembersCreated
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDMembersParams, runtime.ClientAuthInfoWriter) *products.PostProjectsProjectIDMembersCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDMembersCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDMembersParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDMetadatas provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostProjectsProjectIDMetadatas(params *products.PostProjectsProjectIDMetadatasParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostProjectsProjectIDMetadatasOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostProjectsProjectIDMetadatasOK
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDMetadatasParams, runtime.ClientAuthInfoWriter) *products.PostProjectsProjectIDMetadatasOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDMetadatasOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDMetadatasParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDRobots provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostProjectsProjectIDRobots(params *products.PostProjectsProjectIDRobotsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostProjectsProjectIDRobotsCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostProjectsProjectIDRobotsCreated
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDRobotsParams, runtime.ClientAuthInfoWriter) *products.PostProjectsProjectIDRobotsCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDRobotsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDRobotsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDWebhookPolicies provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostProjectsProjectIDWebhookPolicies(params *products.PostProjectsProjectIDWebhookPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostProjectsProjectIDWebhookPoliciesCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostProjectsProjectIDWebhookPoliciesCreated
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDWebhookPoliciesParams, runtime.ClientAuthInfoWriter) *products.PostProjectsProjectIDWebhookPoliciesCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDWebhookPoliciesCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDWebhookPoliciesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDWebhookPoliciesTest provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostProjectsProjectIDWebhookPoliciesTest(params *products.PostProjectsProjectIDWebhookPoliciesTestParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostProjectsProjectIDWebhookPoliciesTestOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostProjectsProjectIDWebhookPoliciesTestOK
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDWebhookPoliciesTestParams, runtime.ClientAuthInfoWriter) *products.PostProjectsProjectIDWebhookPoliciesTestOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDWebhookPoliciesTestOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDWebhookPoliciesTestParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRegistries provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostRegistries(params *products.PostRegistriesParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostRegistriesCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostRegistriesCreated
	if rf, ok := ret.Get(0).(func(*products.PostRegistriesParams, runtime.ClientAuthInfoWriter) *products.PostRegistriesCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostRegistriesCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostRegistriesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRegistriesPing provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostRegistriesPing(params *products.PostRegistriesPingParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostRegistriesPingOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostRegistriesPingOK
	if rf, ok := ret.Get(0).(func(*products.PostRegistriesPingParams, runtime.ClientAuthInfoWriter) *products.PostRegistriesPingOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostRegistriesPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostRegistriesPingParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostReplicationExecutions provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostReplicationExecutions(params *products.PostReplicationExecutionsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostReplicationExecutionsCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostReplicationExecutionsCreated
	if rf, ok := ret.Get(0).(func(*products.PostReplicationExecutionsParams, runtime.ClientAuthInfoWriter) *products.PostReplicationExecutionsCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostReplicationExecutionsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostReplicationExecutionsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostReplicationPolicies provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostReplicationPolicies(params *products.PostReplicationPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostReplicationPoliciesCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostReplicationPoliciesCreated
	if rf, ok := ret.Get(0).(func(*products.PostReplicationPoliciesParams, runtime.ClientAuthInfoWriter) *products.PostReplicationPoliciesCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostReplicationPoliciesCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostReplicationPoliciesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRetentions provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostRetentions(params *products.PostRetentionsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostRetentionsCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostRetentionsCreated
	if rf, ok := ret.Get(0).(func(*products.PostRetentionsParams, runtime.ClientAuthInfoWriter) *products.PostRetentionsCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostRetentionsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostRetentionsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRetentionsIDExecutions provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostRetentionsIDExecutions(params *products.PostRetentionsIDExecutionsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostRetentionsIDExecutionsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostRetentionsIDExecutionsOK
	if rf, ok := ret.Get(0).(func(*products.PostRetentionsIDExecutionsParams, runtime.ClientAuthInfoWriter) *products.PostRetentionsIDExecutionsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostRetentionsIDExecutionsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostRetentionsIDExecutionsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostScannersPing provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostScannersPing(params *products.PostScannersPingParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostScannersPingOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostScannersPingOK
	if rf, ok := ret.Get(0).(func(*products.PostScannersPingParams, runtime.ClientAuthInfoWriter) *products.PostScannersPingOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostScannersPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostScannersPingParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSystemGcSchedule provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostSystemGcSchedule(params *products.PostSystemGcScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostSystemGcScheduleOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostSystemGcScheduleOK
	if rf, ok := ret.Get(0).(func(*products.PostSystemGcScheduleParams, runtime.ClientAuthInfoWriter) *products.PostSystemGcScheduleOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostSystemGcScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostSystemGcScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSystemOidcPing provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostSystemOidcPing(params *products.PostSystemOidcPingParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostSystemOidcPingOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostSystemOidcPingOK
	if rf, ok := ret.Get(0).(func(*products.PostSystemOidcPingParams, runtime.ClientAuthInfoWriter) *products.PostSystemOidcPingOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostSystemOidcPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostSystemOidcPingParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSystemScanAllSchedule provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostSystemScanAllSchedule(params *products.PostSystemScanAllScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostSystemScanAllScheduleOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostSystemScanAllScheduleOK
	if rf, ok := ret.Get(0).(func(*products.PostSystemScanAllScheduleParams, runtime.ClientAuthInfoWriter) *products.PostSystemScanAllScheduleOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostSystemScanAllScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostSystemScanAllScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUsergroups provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostUsergroups(params *products.PostUsergroupsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostUsergroupsCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostUsergroupsCreated
	if rf, ok := ret.Get(0).(func(*products.PostUsergroupsParams, runtime.ClientAuthInfoWriter) *products.PostUsergroupsCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostUsergroupsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostUsergroupsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUsers provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PostUsers(params *products.PostUsersParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostUsersCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostUsersCreated
	if rf, ok := ret.Get(0).(func(*products.PostUsersParams, runtime.ClientAuthInfoWriter) *products.PostUsersCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostUsersCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostUsersParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurations provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutConfigurations(params *products.PutConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutConfigurationsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutConfigurationsOK
	if rf, ok := ret.Get(0).(func(*products.PutConfigurationsParams, runtime.ClientAuthInfoWriter) *products.PutConfigurationsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutConfigurationsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutConfigurationsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLabelsID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutLabelsID(params *products.PutLabelsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutLabelsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.PutLabelsIDParams, runtime.ClientAuthInfoWriter) *products.PutLabelsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutLabelsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutProjectsProjectID(params *products.PutProjectsProjectIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutProjectsProjectIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutProjectsProjectIDOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDParams, runtime.ClientAuthInfoWriter) *products.PutProjectsProjectIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDImmutabletagrulesID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutProjectsProjectIDImmutabletagrulesID(params *products.PutProjectsProjectIDImmutabletagrulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutProjectsProjectIDImmutabletagrulesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutProjectsProjectIDImmutabletagrulesIDOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDImmutabletagrulesIDParams, runtime.ClientAuthInfoWriter) *products.PutProjectsProjectIDImmutabletagrulesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDImmutabletagrulesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDImmutabletagrulesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDMembersMid provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutProjectsProjectIDMembersMid(params *products.PutProjectsProjectIDMembersMidParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutProjectsProjectIDMembersMidOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutProjectsProjectIDMembersMidOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter) *products.PutProjectsProjectIDMembersMidOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDMembersMidOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDMetadatasMetaName provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutProjectsProjectIDMetadatasMetaName(params *products.PutProjectsProjectIDMetadatasMetaNameParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutProjectsProjectIDMetadatasMetaNameOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutProjectsProjectIDMetadatasMetaNameOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter) *products.PutProjectsProjectIDMetadatasMetaNameOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDMetadatasMetaNameOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDRobotsRobotID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutProjectsProjectIDRobotsRobotID(params *products.PutProjectsProjectIDRobotsRobotIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutProjectsProjectIDRobotsRobotIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutProjectsProjectIDRobotsRobotIDOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDRobotsRobotIDParams, runtime.ClientAuthInfoWriter) *products.PutProjectsProjectIDRobotsRobotIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDRobotsRobotIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDRobotsRobotIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDWebhookPoliciesPolicyID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutProjectsProjectIDWebhookPoliciesPolicyID(params *products.PutProjectsProjectIDWebhookPoliciesPolicyIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutProjectsProjectIDWebhookPoliciesPolicyIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutProjectsProjectIDWebhookPoliciesPolicyIDOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter) *products.PutProjectsProjectIDWebhookPoliciesPolicyIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDWebhookPoliciesPolicyIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutQuotasID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutQuotasID(params *products.PutQuotasIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutQuotasIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutQuotasIDOK
	if rf, ok := ret.Get(0).(func(*products.PutQuotasIDParams, runtime.ClientAuthInfoWriter) *products.PutQuotasIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutQuotasIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutQuotasIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRegistriesID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutRegistriesID(params *products.PutRegistriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutRegistriesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutRegistriesIDOK
	if rf, ok := ret.Get(0).(func(*products.PutRegistriesIDParams, runtime.ClientAuthInfoWriter) *products.PutRegistriesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutRegistriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutRegistriesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutReplicationExecutionsID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutReplicationExecutionsID(params *products.PutReplicationExecutionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutReplicationExecutionsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutReplicationExecutionsIDOK
	if rf, ok := ret.Get(0).(func(*products.PutReplicationExecutionsIDParams, runtime.ClientAuthInfoWriter) *products.PutReplicationExecutionsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutReplicationExecutionsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutReplicationExecutionsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutReplicationPoliciesID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutReplicationPoliciesID(params *products.PutReplicationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutReplicationPoliciesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutReplicationPoliciesIDOK
	if rf, ok := ret.Get(0).(func(*products.PutReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter) *products.PutReplicationPoliciesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutReplicationPoliciesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRetentionsID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutRetentionsID(params *products.PutRetentionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutRetentionsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutRetentionsIDOK
	if rf, ok := ret.Get(0).(func(*products.PutRetentionsIDParams, runtime.ClientAuthInfoWriter) *products.PutRetentionsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutRetentionsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutRetentionsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSystemCVEWhitelist provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutSystemCVEWhitelist(params *products.PutSystemCVEWhitelistParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutSystemCVEWhitelistOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutSystemCVEWhitelistOK
	if rf, ok := ret.Get(0).(func(*products.PutSystemCVEWhitelistParams, runtime.ClientAuthInfoWriter) *products.PutSystemCVEWhitelistOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutSystemCVEWhitelistOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutSystemCVEWhitelistParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSystemGcSchedule provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutSystemGcSchedule(params *products.PutSystemGcScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutSystemGcScheduleOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutSystemGcScheduleOK
	if rf, ok := ret.Get(0).(func(*products.PutSystemGcScheduleParams, runtime.ClientAuthInfoWriter) *products.PutSystemGcScheduleOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutSystemGcScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutSystemGcScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSystemScanAllSchedule provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutSystemScanAllSchedule(params *products.PutSystemScanAllScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutSystemScanAllScheduleOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutSystemScanAllScheduleOK
	if rf, ok := ret.Get(0).(func(*products.PutSystemScanAllScheduleParams, runtime.ClientAuthInfoWriter) *products.PutSystemScanAllScheduleOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutSystemScanAllScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutSystemScanAllScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsergroupsGroupID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutUsergroupsGroupID(params *products.PutUsergroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutUsergroupsGroupIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutUsergroupsGroupIDOK
	if rf, ok := ret.Get(0).(func(*products.PutUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter) *products.PutUsergroupsGroupIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsergroupsGroupIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsersUserID provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutUsersUserID(params *products.PutUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutUsersUserIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutUsersUserIDOK
	if rf, ok := ret.Get(0).(func(*products.PutUsersUserIDParams, runtime.ClientAuthInfoWriter) *products.PutUsersUserIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsersUserIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsersUserIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsersUserIDCliSecret provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutUsersUserIDCliSecret(params *products.PutUsersUserIDCliSecretParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutUsersUserIDCliSecretOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutUsersUserIDCliSecretOK
	if rf, ok := ret.Get(0).(func(*products.PutUsersUserIDCliSecretParams, runtime.ClientAuthInfoWriter) *products.PutUsersUserIDCliSecretOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsersUserIDCliSecretOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsersUserIDCliSecretParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsersUserIDPassword provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutUsersUserIDPassword(params *products.PutUsersUserIDPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutUsersUserIDPasswordOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutUsersUserIDPasswordOK
	if rf, ok := ret.Get(0).(func(*products.PutUsersUserIDPasswordParams, runtime.ClientAuthInfoWriter) *products.PutUsersUserIDPasswordOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsersUserIDPasswordOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsersUserIDPasswordParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsersUserIDSysadmin provides a mock function with given fields: params, authInfo
func (_m *MockClientService) PutUsersUserIDSysadmin(params *products.PutUsersUserIDSysadminParams, authInfo runtime.ClientAuthInfoWriter) (*products.PutUsersUserIDSysadminOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PutUsersUserIDSysadminOK
	if rf, ok := ret.Get(0).(func(*products.PutUsersUserIDSysadminParams, runtime.ClientAuthInfoWriter) *products.PutUsersUserIDSysadminOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsersUserIDSysadminOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsersUserIDSysadminParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
