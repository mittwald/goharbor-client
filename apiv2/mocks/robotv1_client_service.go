// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	robotv1 "github.com/mittwald/goharbor-client/v5/apiv2/internal/api/client/robotv1"
	mock "github.com/stretchr/testify/mock"
)

// MockRobotv1ClientService is an autogenerated mock type for the ClientService type
type MockRobotv1ClientService struct {
	mock.Mock
}

// CreateRobotV1 provides a mock function with given fields: params, authInfo
func (_m *MockRobotv1ClientService) CreateRobotV1(params *robotv1.CreateRobotV1Params, authInfo runtime.ClientAuthInfoWriter) (*robotv1.CreateRobotV1Created, error) {
	ret := _m.Called(params, authInfo)

	var r0 *robotv1.CreateRobotV1Created
	if rf, ok := ret.Get(0).(func(*robotv1.CreateRobotV1Params, runtime.ClientAuthInfoWriter) *robotv1.CreateRobotV1Created); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.CreateRobotV1Created)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.CreateRobotV1Params, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRobotV1 provides a mock function with given fields: params, authInfo
func (_m *MockRobotv1ClientService) DeleteRobotV1(params *robotv1.DeleteRobotV1Params, authInfo runtime.ClientAuthInfoWriter) (*robotv1.DeleteRobotV1OK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *robotv1.DeleteRobotV1OK
	if rf, ok := ret.Get(0).(func(*robotv1.DeleteRobotV1Params, runtime.ClientAuthInfoWriter) *robotv1.DeleteRobotV1OK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.DeleteRobotV1OK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.DeleteRobotV1Params, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRobotByIDV1 provides a mock function with given fields: params, authInfo
func (_m *MockRobotv1ClientService) GetRobotByIDV1(params *robotv1.GetRobotByIDV1Params, authInfo runtime.ClientAuthInfoWriter) (*robotv1.GetRobotByIDV1OK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *robotv1.GetRobotByIDV1OK
	if rf, ok := ret.Get(0).(func(*robotv1.GetRobotByIDV1Params, runtime.ClientAuthInfoWriter) *robotv1.GetRobotByIDV1OK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.GetRobotByIDV1OK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.GetRobotByIDV1Params, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRobotV1 provides a mock function with given fields: params, authInfo
func (_m *MockRobotv1ClientService) ListRobotV1(params *robotv1.ListRobotV1Params, authInfo runtime.ClientAuthInfoWriter) (*robotv1.ListRobotV1OK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *robotv1.ListRobotV1OK
	if rf, ok := ret.Get(0).(func(*robotv1.ListRobotV1Params, runtime.ClientAuthInfoWriter) *robotv1.ListRobotV1OK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.ListRobotV1OK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.ListRobotV1Params, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockRobotv1ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateRobotV1 provides a mock function with given fields: params, authInfo
func (_m *MockRobotv1ClientService) UpdateRobotV1(params *robotv1.UpdateRobotV1Params, authInfo runtime.ClientAuthInfoWriter) (*robotv1.UpdateRobotV1OK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *robotv1.UpdateRobotV1OK
	if rf, ok := ret.Get(0).(func(*robotv1.UpdateRobotV1Params, runtime.ClientAuthInfoWriter) *robotv1.UpdateRobotV1OK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.UpdateRobotV1OK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.UpdateRobotV1Params, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRobotv1ClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRobotv1ClientService creates a new instance of MockRobotv1ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRobotv1ClientService(t mockConstructorTestingTNewMockRobotv1ClientService) *MockRobotv1ClientService {
	mock := &MockRobotv1ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
