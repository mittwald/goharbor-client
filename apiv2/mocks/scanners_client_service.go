// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	scanners "github.com/mittwald/goharbor-client/v3/apiv2/internal/legacyapi/client/scanners"
)

// MockScannersClientService is an autogenerated mock type for the ClientService type
type MockScannersClientService struct {
	mock.Mock
}

// DeleteScannersRegistrationID provides a mock function with given fields: params, authInfo
func (_m *MockScannersClientService) DeleteScannersRegistrationID(params *scanners.DeleteScannersRegistrationIDParams, authInfo runtime.ClientAuthInfoWriter) (*scanners.DeleteScannersRegistrationIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *scanners.DeleteScannersRegistrationIDOK
	if rf, ok := ret.Get(0).(func(*scanners.DeleteScannersRegistrationIDParams, runtime.ClientAuthInfoWriter) *scanners.DeleteScannersRegistrationIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanners.DeleteScannersRegistrationIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scanners.DeleteScannersRegistrationIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchScannersRegistrationID provides a mock function with given fields: params, authInfo
func (_m *MockScannersClientService) PatchScannersRegistrationID(params *scanners.PatchScannersRegistrationIDParams, authInfo runtime.ClientAuthInfoWriter) (*scanners.PatchScannersRegistrationIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *scanners.PatchScannersRegistrationIDOK
	if rf, ok := ret.Get(0).(func(*scanners.PatchScannersRegistrationIDParams, runtime.ClientAuthInfoWriter) *scanners.PatchScannersRegistrationIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanners.PatchScannersRegistrationIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scanners.PatchScannersRegistrationIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostScanners provides a mock function with given fields: params, authInfo
func (_m *MockScannersClientService) PostScanners(params *scanners.PostScannersParams, authInfo runtime.ClientAuthInfoWriter) (*scanners.PostScannersCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *scanners.PostScannersCreated
	if rf, ok := ret.Get(0).(func(*scanners.PostScannersParams, runtime.ClientAuthInfoWriter) *scanners.PostScannersCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanners.PostScannersCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scanners.PostScannersParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDScanner provides a mock function with given fields: params, authInfo
func (_m *MockScannersClientService) PutProjectsProjectIDScanner(params *scanners.PutProjectsProjectIDScannerParams, authInfo runtime.ClientAuthInfoWriter) (*scanners.PutProjectsProjectIDScannerOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *scanners.PutProjectsProjectIDScannerOK
	if rf, ok := ret.Get(0).(func(*scanners.PutProjectsProjectIDScannerParams, runtime.ClientAuthInfoWriter) *scanners.PutProjectsProjectIDScannerOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanners.PutProjectsProjectIDScannerOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scanners.PutProjectsProjectIDScannerParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutScannersRegistrationID provides a mock function with given fields: params, authInfo
func (_m *MockScannersClientService) PutScannersRegistrationID(params *scanners.PutScannersRegistrationIDParams, authInfo runtime.ClientAuthInfoWriter) (*scanners.PutScannersRegistrationIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *scanners.PutScannersRegistrationIDOK
	if rf, ok := ret.Get(0).(func(*scanners.PutScannersRegistrationIDParams, runtime.ClientAuthInfoWriter) *scanners.PutScannersRegistrationIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanners.PutScannersRegistrationIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scanners.PutScannersRegistrationIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockScannersClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
