// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	webhook "github.com/mittwald/goharbor-client/v5/apiv2/internal/api/client/webhook"
)

// MockWebhookClientService is an autogenerated mock type for the ClientService type
type MockWebhookClientService struct {
	mock.Mock
}

// CreateWebhookPolicyOfProject provides a mock function with given fields: params, authInfo
func (_m *MockWebhookClientService) CreateWebhookPolicyOfProject(params *webhook.CreateWebhookPolicyOfProjectParams, authInfo runtime.ClientAuthInfoWriter) (*webhook.CreateWebhookPolicyOfProjectCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *webhook.CreateWebhookPolicyOfProjectCreated
	if rf, ok := ret.Get(0).(func(*webhook.CreateWebhookPolicyOfProjectParams, runtime.ClientAuthInfoWriter) *webhook.CreateWebhookPolicyOfProjectCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.CreateWebhookPolicyOfProjectCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*webhook.CreateWebhookPolicyOfProjectParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebhookPolicyOfProject provides a mock function with given fields: params, authInfo
func (_m *MockWebhookClientService) DeleteWebhookPolicyOfProject(params *webhook.DeleteWebhookPolicyOfProjectParams, authInfo runtime.ClientAuthInfoWriter) (*webhook.DeleteWebhookPolicyOfProjectOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *webhook.DeleteWebhookPolicyOfProjectOK
	if rf, ok := ret.Get(0).(func(*webhook.DeleteWebhookPolicyOfProjectParams, runtime.ClientAuthInfoWriter) *webhook.DeleteWebhookPolicyOfProjectOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.DeleteWebhookPolicyOfProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*webhook.DeleteWebhookPolicyOfProjectParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupportedEventTypes provides a mock function with given fields: params, authInfo
func (_m *MockWebhookClientService) GetSupportedEventTypes(params *webhook.GetSupportedEventTypesParams, authInfo runtime.ClientAuthInfoWriter) (*webhook.GetSupportedEventTypesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *webhook.GetSupportedEventTypesOK
	if rf, ok := ret.Get(0).(func(*webhook.GetSupportedEventTypesParams, runtime.ClientAuthInfoWriter) *webhook.GetSupportedEventTypesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.GetSupportedEventTypesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*webhook.GetSupportedEventTypesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhookPolicyOfProject provides a mock function with given fields: params, authInfo
func (_m *MockWebhookClientService) GetWebhookPolicyOfProject(params *webhook.GetWebhookPolicyOfProjectParams, authInfo runtime.ClientAuthInfoWriter) (*webhook.GetWebhookPolicyOfProjectOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *webhook.GetWebhookPolicyOfProjectOK
	if rf, ok := ret.Get(0).(func(*webhook.GetWebhookPolicyOfProjectParams, runtime.ClientAuthInfoWriter) *webhook.GetWebhookPolicyOfProjectOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.GetWebhookPolicyOfProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*webhook.GetWebhookPolicyOfProjectParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastTrigger provides a mock function with given fields: params, authInfo
func (_m *MockWebhookClientService) LastTrigger(params *webhook.LastTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*webhook.LastTriggerOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *webhook.LastTriggerOK
	if rf, ok := ret.Get(0).(func(*webhook.LastTriggerParams, runtime.ClientAuthInfoWriter) *webhook.LastTriggerOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.LastTriggerOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*webhook.LastTriggerParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebhookPoliciesOfProject provides a mock function with given fields: params, authInfo
func (_m *MockWebhookClientService) ListWebhookPoliciesOfProject(params *webhook.ListWebhookPoliciesOfProjectParams, authInfo runtime.ClientAuthInfoWriter) (*webhook.ListWebhookPoliciesOfProjectOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *webhook.ListWebhookPoliciesOfProjectOK
	if rf, ok := ret.Get(0).(func(*webhook.ListWebhookPoliciesOfProjectParams, runtime.ClientAuthInfoWriter) *webhook.ListWebhookPoliciesOfProjectOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.ListWebhookPoliciesOfProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*webhook.ListWebhookPoliciesOfProjectParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockWebhookClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateWebhookPolicyOfProject provides a mock function with given fields: params, authInfo
func (_m *MockWebhookClientService) UpdateWebhookPolicyOfProject(params *webhook.UpdateWebhookPolicyOfProjectParams, authInfo runtime.ClientAuthInfoWriter) (*webhook.UpdateWebhookPolicyOfProjectOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *webhook.UpdateWebhookPolicyOfProjectOK
	if rf, ok := ret.Get(0).(func(*webhook.UpdateWebhookPolicyOfProjectParams, runtime.ClientAuthInfoWriter) *webhook.UpdateWebhookPolicyOfProjectOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.UpdateWebhookPolicyOfProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*webhook.UpdateWebhookPolicyOfProjectParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockWebhookClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockWebhookClientService creates a new instance of MockWebhookClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWebhookClientService(t mockConstructorTestingTNewMockWebhookClientService) *MockWebhookClientService {
	mock := &MockWebhookClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
