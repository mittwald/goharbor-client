// Code generated by go-swagger; DO NOT EDIT.

package legacy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SupportedWebhookEventTypes Supportted webhook event types and notify types.
//
// swagger:model SupportedWebhookEventTypes
type SupportedWebhookEventTypes struct {

	// event type
	EventType []EventType `json:"event_type"`

	// notify type
	NotifyType []NotifyType `json:"notify_type"`
}

// Validate validates this supported webhook event types
func (m *SupportedWebhookEventTypes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupportedWebhookEventTypes) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	for i := 0; i < len(m.EventType); i++ {

		if err := m.EventType[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_type" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SupportedWebhookEventTypes) validateNotifyType(formats strfmt.Registry) error {
	if swag.IsZero(m.NotifyType) { // not required
		return nil
	}

	for i := 0; i < len(m.NotifyType); i++ {

		if err := m.NotifyType[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notify_type" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this supported webhook event types based on the context it is used
func (m *SupportedWebhookEventTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupportedWebhookEventTypes) contextValidateEventType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EventType); i++ {

		if err := m.EventType[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_type" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SupportedWebhookEventTypes) contextValidateNotifyType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NotifyType); i++ {

		if err := m.NotifyType[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notify_type" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SupportedWebhookEventTypes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupportedWebhookEventTypes) UnmarshalBinary(b []byte) error {
	var res SupportedWebhookEventTypes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
