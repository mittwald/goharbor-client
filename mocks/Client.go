// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mittwald/goharbor-client/internal/api/v1.10.0/model"

	project "github.com/mittwald/goharbor-client/project"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AddProjectMember provides a mock function with given fields: ctx, p, u, roleID
func (_m *Client) AddProjectMember(ctx context.Context, p *model.Project, u *model.User, roleID int) error {
	ret := _m.Called(ctx, p, u, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project, *model.User, int) error); ok {
		r0 = rf(ctx, p, u, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddProjectMetadata provides a mock function with given fields: ctx, p, key, value
func (_m *Client) AddProjectMetadata(ctx context.Context, p *model.Project, key project.ProjectMetadataKey, value string) error {
	ret := _m.Called(ctx, p, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project, project.ProjectMetadataKey, string) error); ok {
		r0 = rf(ctx, p, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: ctx, p
func (_m *Client) DeleteProject(ctx context.Context, p *model.Project) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProjectMember provides a mock function with given fields: ctx, p, u
func (_m *Client) DeleteProjectMember(ctx context.Context, p *model.Project, u *model.User) error {
	ret := _m.Called(ctx, p, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project, *model.User) error); ok {
		r0 = rf(ctx, p, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProjectMetadataValue provides a mock function with given fields: ctx, p, key
func (_m *Client) DeleteProjectMetadataValue(ctx context.Context, p *model.Project, key project.ProjectMetadataKey) error {
	ret := _m.Called(ctx, p, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project, project.ProjectMetadataKey) error); ok {
		r0 = rf(ctx, p, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRegistry provides a mock function with given fields: ctx, r
func (_m *Client) DeleteRegistry(ctx context.Context, r *model.Registry) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Registry) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReplication provides a mock function with given fields: ctx, r
func (_m *Client) DeleteReplication(ctx context.Context, r *model.ReplicationPolicy) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ReplicationPolicy) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, u
func (_m *Client) DeleteUser(ctx context.Context, u *model.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProject provides a mock function with given fields: ctx, name
func (_m *Client) GetProject(ctx context.Context, name string) (*model.Project, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Project
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Project); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistry provides a mock function with given fields: ctx, name
func (_m *Client) GetRegistry(ctx context.Context, name string) (*model.Registry, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Registry
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Registry); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Registry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplication provides a mock function with given fields: ctx, name
func (_m *Client) GetReplication(ctx context.Context, name string) (*model.ReplicationPolicy, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.ReplicationPolicy
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ReplicationPolicy); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ReplicationPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemGarbageCollection provides a mock function with given fields: ctx
func (_m *Client) GetSystemGarbageCollection(ctx context.Context) (*model.AdminJobSchedule, error) {
	ret := _m.Called(ctx)

	var r0 *model.AdminJobSchedule
	if rf, ok := ret.Get(0).(func(context.Context) *model.AdminJobSchedule); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AdminJobSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, username
func (_m *Client) GetUser(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectMembers provides a mock function with given fields: ctx, p
func (_m *Client) ListProjectMembers(ctx context.Context, p *model.Project) ([]*model.ProjectMemberEntity, error) {
	ret := _m.Called(ctx, p)

	var r0 []*model.ProjectMemberEntity
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project) []*model.ProjectMemberEntity); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProjectMemberEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Project) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectMetadata provides a mock function with given fields: ctx, p
func (_m *Client) ListProjectMetadata(ctx context.Context, p *model.Project) (*model.ProjectMetadata, error) {
	ret := _m.Called(ctx, p)

	var r0 *model.ProjectMetadata
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project) *model.ProjectMetadata); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProjectMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Project) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, nameFilter
func (_m *Client) ListProjects(ctx context.Context, nameFilter string) ([]*model.Project, error) {
	ret := _m.Called(ctx, nameFilter)

	var r0 []*model.Project
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Project); ok {
		r0 = rf(ctx, nameFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nameFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProject provides a mock function with given fields: ctx, name, countLimit, storageLimit
func (_m *Client) NewProject(ctx context.Context, name string, countLimit int, storageLimit int) {
	_m.Called(ctx, name, countLimit, storageLimit)
}

// NewRegistry provides a mock function with given fields: ctx, name, registryType, url, credential, insecure
func (_m *Client) NewRegistry(ctx context.Context, name string, registryType string, url string, credential *model.RegistryCredential, insecure bool) (*model.Registry, error) {
	ret := _m.Called(ctx, name, registryType, url, credential, insecure)

	var r0 *model.Registry
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *model.RegistryCredential, bool) *model.Registry); ok {
		r0 = rf(ctx, name, registryType, url, credential, insecure)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Registry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *model.RegistryCredential, bool) error); ok {
		r1 = rf(ctx, name, registryType, url, credential, insecure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReplication provides a mock function with given fields: ctx, destRegistry, srcRegistry, replicateDeletion, override, enablePolicy, filters, trigger, destNamespace, description, name
func (_m *Client) NewReplication(ctx context.Context, destRegistry *model.Registry, srcRegistry *model.Registry, replicateDeletion bool, override bool, enablePolicy bool, filters []*model.ReplicationFilter, trigger *model.ReplicationTrigger, destNamespace string, description string, name string) (*model.ReplicationPolicy, error) {
	ret := _m.Called(ctx, destRegistry, srcRegistry, replicateDeletion, override, enablePolicy, filters, trigger, destNamespace, description, name)

	var r0 *model.ReplicationPolicy
	if rf, ok := ret.Get(0).(func(context.Context, *model.Registry, *model.Registry, bool, bool, bool, []*model.ReplicationFilter, *model.ReplicationTrigger, string, string, string) *model.ReplicationPolicy); ok {
		r0 = rf(ctx, destRegistry, srcRegistry, replicateDeletion, override, enablePolicy, filters, trigger, destNamespace, description, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ReplicationPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Registry, *model.Registry, bool, bool, bool, []*model.ReplicationFilter, *model.ReplicationTrigger, string, string, string) error); ok {
		r1 = rf(ctx, destRegistry, srcRegistry, replicateDeletion, override, enablePolicy, filters, trigger, destNamespace, description, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSystemGarbageCollection provides a mock function with given fields: ctx, cron, scheduleType
func (_m *Client) NewSystemGarbageCollection(ctx context.Context, cron string, scheduleType string) (*model.AdminJobSchedule, error) {
	ret := _m.Called(ctx, cron, scheduleType)

	var r0 *model.AdminJobSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.AdminJobSchedule); ok {
		r0 = rf(ctx, cron, scheduleType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AdminJobSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, cron, scheduleType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser provides a mock function with given fields: ctx, username, email, realname, password, comments
func (_m *Client) NewUser(ctx context.Context, username string, email string, realname string, password string, comments string) {
	_m.Called(ctx, username, email, realname, password, comments)
}

// ResetSystemGarbageCollection provides a mock function with given fields: ctx
func (_m *Client) ResetSystemGarbageCollection(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProject provides a mock function with given fields: ctx, p, countLimit, storageLimit
func (_m *Client) UpdateProject(ctx context.Context, p *model.Project, countLimit int, storageLimit int) error {
	ret := _m.Called(ctx, p, countLimit, storageLimit)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project, int, int) error); ok {
		r0 = rf(ctx, p, countLimit, storageLimit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProjectMemberRole provides a mock function with given fields: ctx, p, u, roleID
func (_m *Client) UpdateProjectMemberRole(ctx context.Context, p *model.Project, u *model.User, roleID int) error {
	ret := _m.Called(ctx, p, u, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project, *model.User, int) error); ok {
		r0 = rf(ctx, p, u, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProjectMetadata provides a mock function with given fields: ctx, p, key, value
func (_m *Client) UpdateProjectMetadata(ctx context.Context, p *model.Project, key project.ProjectMetadataKey, value string) error {
	ret := _m.Called(ctx, p, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project, project.ProjectMetadataKey, string) error); ok {
		r0 = rf(ctx, p, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReplication provides a mock function with given fields: ctx, r
func (_m *Client) UpdateReplication(ctx context.Context, r *model.ReplicationPolicy) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ReplicationPolicy) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSystemGarbageCollection provides a mock function with given fields: ctx, newGcSchedule
func (_m *Client) UpdateSystemGarbageCollection(ctx context.Context, newGcSchedule *model.AdminJobScheduleObj) error {
	ret := _m.Called(ctx, newGcSchedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AdminJobScheduleObj) error); ok {
		r0 = rf(ctx, newGcSchedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, u
func (_m *Client) UpdateUser(ctx context.Context, u *model.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
